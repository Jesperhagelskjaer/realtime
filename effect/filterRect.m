function [ dataFilterede ] = filterRect(fslow,fshigh,dataRAW,jesper)
% Generated by http://www.micromodeler.com/dsp/ using Frequency Sampling (Inverse DFT)
%% ###########################################################
% Create FIR filter using the frequency sampling method with a window
% The length, or number of taps of the filter
% Modified Jesper Hagelskjær

tic;
filter1.length=jesper.TAPS; %Filter order
filter1.fs=jesper.fs; %Samplings frequency Hz
filter1.groupDelay=(filter1.length/2)/filter1.fs; %Group delay in sec.

filter1.fc1=fshigh; %Frequency cut 1 (start of bandpass) 300Hz
filter1.fc2=fslow; %Frequency cut 2 (end of bandpass) 6000Hz
filter1.fc3=jesper.fc3; %Transition band between fc2 and fc3
filter1.gain = 1.0; %Filter gain 0dB

wc1 = (filter1.fc1/filter1.fs)*2; %Normalized frequency
wc2 = (filter1.fc2/filter1.fs)*2;
wc3 = (filter1.fc3/filter1.fs)*2;

% The frequencies at the band edges
filter1.frequencies = [ 0, wc1, wc2, wc3, 1 ];

% The desired response
filter1.desired = [ 0, 1, 1, 0, 0 ]; %Bandpass filter

% Design the filter using the frequency sampling method and different windows
filter1.denominator = 1; % a coefficients (FIR filter)

filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, rectwin(filter1.length) ) * filter1.gain; % hann, hamming, blackman
%filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, hamming(filter1.length) ) * filter1.gain;
%filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, hann(filter1.length) ) * filter1.gain;
%filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, blackman(filter1.length) ) * filter1.gain;

    %dataRAW = single(dataRAW);
dataFilterede = filter(filter1.numerator,filter1.denominator,dataRAW,[],1);%FIR filter

SaveFilterBinFile(jesper.spatial, filter1.numerator);

time = toc;


end


